import hashlib
import requests
import os
from typing import Optional

VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY", "")
VIRUSTOTAL_URL = "https://www.virustotal.com/api/v3"

SUSPICIOUS_FILE_KEYWORDS = [
    'pdfdrive', 'free', 'crack', 'keygen', 'torrent', 'warez', 'malware', 'hacker', 'hack', 'password'
]

def calculate_file_hash(file_path: str) -> dict:
    """
    Calculate MD5, SHA1, and SHA256 hashes of a file
    """
    hash_md5 = hashlib.md5()
    hash_sha1 = hashlib.sha1()
    hash_sha256 = hashlib.sha256()
    
    with open(file_path, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b''):
            hash_md5.update(chunk)
            hash_sha1.update(chunk)
            hash_sha256.update(chunk)
    
    return {
        'md5': hash_md5.hexdigest(),
        'sha1': hash_sha1.hexdigest(),
        'sha256': hash_sha256.hexdigest()
    }

def scan_file_virustotal(file_path: str) -> dict:
    """
    Scan file using VirusTotal API
    """
    if not VIRUSTOTAL_API_KEY:
        return {"error": "VirusTotal API key not configured"}
    
    try:
        # Calculate hash first
        hashes = calculate_file_hash(file_path)
        
        # Check if file already scanned
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        response = requests.get(
            f"{VIRUSTOTAL_URL}/files/{hashes['sha256']}",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            # defensively access attributes
            attrs = data.get('data', {}).get('attributes', {})
            stats = attrs.get('last_analysis_stats', {})

            return {
                "file_hash": hashes['sha256'],
                "malicious": stats.get('malicious', 0),
                "suspicious": stats.get('suspicious', 0),
                "undetected": stats.get('undetected', 0),
                "harmless": stats.get('harmless', 0),
                "total_scans": sum(stats.values()) if stats else 0,
                "is_malware": stats.get('malicious', 0) > 0,
                "threat_level": get_threat_level(stats) if stats else "unknown",
                "scan_date": attrs.get('last_analysis_date')
            }
        
        # If not found, upload for scanning
        elif response.status_code == 404:
            return upload_file_virustotal(file_path, hashes)
        
        else:
            return {"error": f"VirusTotal API error: {response.status_code}"}
            
    except Exception as e:
        return {"error": str(e)}

def upload_file_virustotal(file_path: str, hashes: dict) -> dict:
    """
    Upload file to VirusTotal for scanning
    """
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    
    with open(file_path, 'rb') as f:
        files = {'file': f}
        response = requests.post(
            f"{VIRUSTOTAL_URL}/files",
            headers=headers,
            files=files
        )
    
    if response.status_code in (200, 201, 202):
        try:
            data = response.json()
            analysis_id = data.get('data', {}).get('id')
        except Exception:
            analysis_id = None

        return {
            "status": "uploaded",
            "file_hash": hashes['sha256'],
            "analysis_id": analysis_id,
            "message": "File uploaded for analysis. Check back later for results.",
            "raw_status_code": response.status_code
        }
    else:
        # include response text for easier debugging
        return {"error": "Failed to upload file", "status_code": response.status_code, "response_text": response.text}

def get_threat_level(stats: dict) -> str:
    """
    Determine threat level based on scan results
    """
    malicious = stats.get('malicious', 0)
    suspicious = stats.get('suspicious', 0)
    total = sum(stats.values())
    
    if total == 0:
        return "unknown"
    
    malicious_ratio = malicious / total
    suspicious_ratio = (malicious + suspicious) / total
    
    if malicious_ratio >= 0.3:
        return "critical"
    elif malicious_ratio >= 0.1:
        return "high"
    elif suspicious_ratio >= 0.2:
        return "medium"
    else:
        return "low"

def scan_url_virustotal(url: str) -> dict:
    """
    Scan URL using VirusTotal API
    """
    if not VIRUSTOTAL_API_KEY:
        return {"error": "VirusTotal API key not configured"}
    
    try:
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        
        # Submit URL for scanning
        data = {"url": url}
        response = requests.post(
            f"{VIRUSTOTAL_URL}/urls",
            headers=headers,
            data=data
        )
        
        if response.status_code in (200, 201, 202):
            try:
                result = response.json()
                analysis_id = result.get('data', {}).get('id')
            except Exception:
                analysis_id = None

            if analysis_id:
                # Get analysis results (may return processing status)
                analysis_response = requests.get(f"{VIRUSTOTAL_URL}/analyses/{analysis_id}", headers=headers)
                if analysis_response.status_code == 200:
                    try:
                        analysis_data = analysis_response.json()
                        stats = analysis_data.get('data', {}).get('attributes', {}).get('stats', {})
                        return {
                            "url": url,
                            "malicious": stats.get('malicious', 0),
                            "suspicious": stats.get('suspicious', 0),
                            "harmless": stats.get('harmless', 0),
                            "undetected": stats.get('undetected', 0),
                            "is_malicious": stats.get('malicious', 0) > 0,
                            "threat_level": get_threat_level(stats) if stats else "unknown",
                            "analysis_id": analysis_id
                        }
                    except Exception as e:
                        return {"error": "Failed to parse analysis response", "exception": str(e)}
                else:
                    return {"status": "analysis_submitted", "analysis_id": analysis_id, "message": "Analysis is processing. Try again later.", "analysis_status_code": analysis_response.status_code}

        return {"error": "Failed to submit URL for scanning", "status_code": response.status_code, "response_text": response.text}
        
    except Exception as e:
        return {"error": str(e)}

def basic_file_analysis(file_path: str) -> dict:
    """
    Basic static analysis without external APIs
    """
    try:
        file_size = os.path.getsize(file_path)
        hashes = calculate_file_hash(file_path)
        
        # Check file extension and suspicious filename patterns
        _, ext = os.path.splitext(file_path)
        suspicious_extensions = ['.exe', '.dll', '.bat', '.cmd', '.vbs', '.js', '.scr', '.pdf']

        basename = os.path.basename(file_path).lower()
        is_suspicious_extension = ext.lower() in suspicious_extensions

        # Flag files that contain known risky keywords in their filename (common for dodgy downloads)
        filename_flags = [kw for kw in SUSPICIOUS_FILE_KEYWORDS if kw in basename]
        is_suspicious_name = len(filename_flags) > 0

        is_suspicious = is_suspicious_extension or is_suspicious_name

        indicators = []
        if is_suspicious_extension:
            indicators.append(f"Suspicious extension detected: {ext}")
        if is_suspicious_name:
            indicators.append(f"Suspicious filename keywords: {', '.join(filename_flags)}")

        return {
            "file_size": file_size,
            "hashes": hashes,
            "extension": ext,
            "basename": basename,
            "is_suspicious_extension": is_suspicious_extension,
            "is_suspicious_name": is_suspicious_name,
            "is_suspicious": is_suspicious,
            "indicators": indicators,
            "analysis": "Basic static analysis completed"
        }
        
    except Exception as e:
        return {"error": str(e)}