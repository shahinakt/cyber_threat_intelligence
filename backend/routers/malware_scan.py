from fastapi import APIRouter, Depends, UploadFile, File, HTTPException
from pydantic import BaseModel
from routers.auth import get_current_user
from utils.malware_scanner import scan_file_virustotal, scan_url_virustotal, basic_file_analysis, VIRUSTOTAL_API_KEY
from utils.phishing import check_email_phishing
import aiofiles
import os

router = APIRouter()

UPLOAD_DIR = "static/uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

class URLScanRequest(BaseModel):
    url: str

@router.post("/scan-file")
async def scan_file(
    file: UploadFile = File(...),
    current_user: dict = Depends(get_current_user)
):
    try:
        file_path = os.path.join(UPLOAD_DIR, file.filename)
        
        async with aiofiles.open(file_path, 'wb') as f:
            content = await file.read()
            await f.write(content)
        
        # Perform basic analysis
        basic_result = basic_file_analysis(file_path)
        
        # Perform VirusTotal scan (only if API key configured)
        if VIRUSTOTAL_API_KEY:
            vt_result = scan_file_virustotal(file_path)
        else:
            vt_result = {"error": "VirusTotal API key not configured", "message": "Skipping external VT scan; basic analysis returned."}
        
        # Clean up
        os.remove(file_path)
        
        return {
            "filename": file.filename,
            "basic_analysis": basic_result,
            "virustotal_scan": vt_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/scan-url")
async def scan_url(
    data: URLScanRequest,
    current_user: dict = Depends(get_current_user)
):
    result = scan_url_virustotal(data.url)
    return result


class EmailScanRequest(BaseModel):
    email_body: str
    sender: str


@router.post("/scan-email")
async def scan_email(
    data: EmailScanRequest,
    current_user: dict = Depends(get_current_user)
):
    """Analyze an email for malware-related indicators and also run phishing heuristics."""
    try:
        # Phishing-oriented analysis
        phishing_result = check_email_phishing(data.email_body, data.sender)

        # Extract URLs and scan them via VirusTotal where possible
        import re
        urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', data.email_body)
        url_scans = []
        for u in urls:
            try:
                url_scans.append({"url": u, "result": scan_url_virustotal(u)})
            except Exception as e:
                url_scans.append({"url": u, "error": str(e)})

        return {"phishing_analysis": phishing_result, "url_scans": url_scans}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))